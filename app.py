import os, asyncio
from multiprocessing import Process
from flask import Flask
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters

TOKEN = os.getenv("TELEGRAM_TOKEN")
if not TOKEN:
    raise RuntimeError("TELEGRAM_TOKEN is not set")

# ---------- Telegram bot ----------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –£—á–ë–æ—Ç–∏–∫ ü§ñ –ü—Ä–∏—à–ª–∏ —Ç–µ–∫—Å—Ç –∏–ª–∏ —Ñ–æ—Ç–æ –∑–∞–¥–∞—á–∏.")

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–Ω—è–ª —Ç–µ–∫—Å—Ç ‚úÖ. –°–∫–æ—Ä–æ –±—É–¥–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—ã–π —Ä–∞–∑–±–æ—Ä!")

async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–§–æ—Ç–æ –ø–æ–ª—É—á–∏–ª ‚úÖ. –ê–Ω–∞–ª–∏–∑ –∫–∞—Ä—Ç–∏–Ω–æ–∫ –¥–æ–±–∞–≤–∏–º –ø–æ–∑–∂–µ.")

async def bot_main():
    app_tg = ApplicationBuilder().token(TOKEN).build()
    app_tg.add_handler(CommandHandler("start", start))
    app_tg.add_handler(MessageHandler(filters.PHOTO, handle_photo))
    app_tg.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    # –±–µ–∑ —Å–∏–≥–Ω–∞–ª–æ–≤ ‚Äî –æ–Ω–∏ —É gunicorn
    await app_tg.run_polling(stop_signals=None)

def _bot_process():
    asyncio.run(bot_main())

# ---------- Flask (health-check –¥–ª—è Render) ----------
app = Flask(__name__)

@app.get("/")
def health():
    return "ok", 200

# –°—Ç–∞—Ä—Ç—É–µ–º –ë–û–¢–ê –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ —Å—Ä–∞–∑—É –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –º–æ–¥—É–ª—è
_bot = Process(target=_bot_process, daemon=True)
_bot.start()

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=int(os.getenv("PORT", 10000)))
