import os
import threading
from http.server import BaseHTTPRequestHandler, HTTPServer

from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters

# --- –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ---
TOKEN = os.getenv("TELEGRAM_TOKEN")
if not TOKEN:
    raise RuntimeError("TELEGRAM_TOKEN is not set")
PORT = int(os.getenv("PORT", "10000"))

# --- health-check HTTP server –Ω–∞ $PORT (–¥–ª—è Render) ---
class HealthHandler(BaseHTTPRequestHandler):
    def do_HEAD(self):
        self.send_response(200); self.end_headers()
    def do_GET(self):
        self.send_response(200); self.end_headers()
        self.wfile.write(b"ok")

def start_health_server():
    HTTPServer(("0.0.0.0", PORT), HealthHandler).serve_forever()

# --- Telegram handlers (async ‚Äî —ç—Ç–æ –Ω–æ—Ä–º –¥–ª—è PTB v21) ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –£—á–ë–æ—Ç–∏–∫ ü§ñ –ü—Ä–∏—à–ª–∏ —Ç–µ–∫—Å—Ç –∏–ª–∏ —Ñ–æ—Ç–æ –∑–∞–¥–∞—á–∏.")

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–Ω—è–ª —Ç–µ–∫—Å—Ç ‚úÖ. –°–∫–æ—Ä–æ –±—É–¥–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—ã–π —Ä–∞–∑–±–æ—Ä!")

async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–§–æ—Ç–æ –ø–æ–ª—É—á–∏–ª ‚úÖ. –ê–Ω–∞–ª–∏–∑ –∫–∞—Ä—Ç–∏–Ω–æ–∫ –¥–æ–±–∞–≤–∏–º –ø–æ–∑–∂–µ.")

def main():
    # –ø–æ–¥–Ω–∏–º–∞–µ–º health-—Å–µ—Ä–≤–µ—Ä –≤ —Ñ–æ–Ω–µ
    threading.Thread(target=start_health_server, daemon=True).start()

    # —Å–æ–±–∏—Ä–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –¢–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.PHOTO, handle_photo))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))

    # –í–ê–ñ–ù–û: —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ –±–µ–∑ asyncio.run –∏ –±–µ–∑ —Å–∏–≥–Ω–∞–ª–æ–≤
    app.run_polling(stop_signals=None)

if __name__ == "__main__":
    main()
